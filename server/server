#!/bin/bash

# Function to display help information
display_help() {
    echo "Usage: ./server.sh [command] [arguments]"
    echo ""
    echo "Commands:"
    echo "  start [dev | prod] [port]    Start the server. The port and environment can optionally be specified. The dev environment uses http with default port 3000 while prod environment uses https with default port 443."
    echo "  stop            Stop the server"
    echo "  restart [dev | prod] [port]  Restart the server. The port can optionally be specified. Uses http Server if Certificates are installed. Must be executed as root if Ports 80 and 443 are used. (default: 443, 80 if no SSL certificate is found)"
    echo "  help            Display this help message"
}

# Function to start the server
start_server() {
    # Check if the server is already running
    if pgrep -f "node server/server.js" > /dev/null; then
        echo "The server is already running. Restart? (y/n)"
        read -r restart
        if [ "$restart" = "n" ]; then
            echo "Exiting."
            exit 1
        fi
        stop_server
    fi

    # Run npm build in the client directory before starting the server
    echo "Rebuilding the client? (y/n)"
    read -r rebuild
    if [ "$rebuild" = "y" ]; then
        echo "Running npm run build in the client directory..."
        cd ../client && npm run build
        if [ $? -ne 0 ]; then
            echo "Failed to run npm run build in the client directory. Exiting."
            exit 1
        fi
        cd ../server || exit
    fi

    # Start the server with the provided arguments or defaults
    echo "Starting the server..."
    nohup node server.js "$@" > output.log 2>&1 &
    # Check if the server started successfully
    sleep 2  # Wait for a few seconds to let the server start
    if pgrep -f "node server.js" > /dev/null; then
        echo "Server started successfully."
        echo "Output is redirected to output.log."
    else
      echo "Failed to start the server. Check output.log for more information."
      echo "Info: Starting the server on a protected port such as 80 or 443 may require root privileges."
    fi
}

# Function to stop the server
stop_server() {
    echo "Stopping the server..."

    pkill -f node

    if [ $? -ne 0 ]; then
        echo "Failed to stop the server. Retry with sudo privileges..."
        echo "Please enter your password if prompted."
        sudo pkill -f node
        if [ $? -ne 0 ]; then
            echo "Failed to stop the server. Check output.log for more information."
        else
            echo "Server stopped successfully with sudo privileges."
        fi
    fi
    echo "Server stopped successfully."
}

# Function to restart the server
restart_server() {
    echo "Restarting the server..."
    stop_server
    start_server "$@"
    echo "Server restarted successfully."
}

# Check the command-line argument
if [ "$1" = "start" ]; then
    shift
    start_server "$@"
elif [ "$1" = "stop" ]; then
    stop_server
elif [ "$1" = "restart" ]; then
    shift
    restart_server "$@"
elif [ "$1" = "help" ]; then
    display_help
else
    echo "Invalid argument. Please use one of the following commands:"
    display_help
fi